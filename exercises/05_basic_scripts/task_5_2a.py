# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip =  input('Введите адрес хоста и маску: ' )
s1 = ip[:ip.find('/')]
s2 = ip[ip.find('/')+1:]
print('Network:')
l1 = s1.split('.')
x = int(l1[0]) * (256 ** 3) + int(l1[1]) * (256 **2) + int(l1[2]) * 256 + int(l1[3])  # собрали адрес хоста в виде одного числа
# выделили адрес сети, теперь надо вывести
y =  x- (x % (2 **  (32 - int(s2))))  # получили адрес сети в виде одного числа
l1 = []
for i in range(4): # делим адрес сети по частям
    l1.append(y // (256 ** (3-i)) )
    y = y % (256 ** (3-i))
for item in l1:
    print("{:8}".format(item), end='  ')
print('')
for item in l1:
    print("{:08b}".format(int(item)), end='  ')
print('')
print('')
print('Mask:')
print('/'+s2)
s1 = '1'* int(s2) + '0' * (32 - int(s2))
print(s1[0:8],'', s1[8:16],'',s1[16:24], '',s1[24:32])
s2 = s1[0:8]
x = 128 * (ord(s2[0]) - 48) + 64 * (ord(s2[1]) - 48) + 32 * (ord(s2[2]) - 48) + 16 * (ord(s2[3]) - 48) + 8 * (ord(s2[4]) - 48) + 4 * (ord(s2[5]) - 48) + 2 * (ord(s2[6]) - 48) + (ord(s2[7]) - 48)
print("{:<8}".format(x), end='  ')
s2 = s1[8:16]
x = 128 * (ord(s2[0]) - 48) + 64 * (ord(s2[1]) - 48) + 32 * (ord(s2[2]) - 48) + 16 * (ord(s2[3]) - 48) + 8 * (ord(s2[4]) - 48) + 4 * (ord(s2[5]) - 48) + 2 * (ord(s2[6]) - 48) + (ord(s2[7]) - 48)
print("{:<8}".format(x), end='  ')
s2 = s1[16:24]
x = 128 * (ord(s2[0]) - 48) + 64 * (ord(s2[1]) - 48) + 32 * (ord(s2[2]) - 48) + 16 * (ord(s2[3]) - 48) + 8 * (ord(s2[4]) - 48) + 4 * (ord(s2[5]) - 48) + 2 * (ord(s2[6]) - 48) + (ord(s2[7]) - 48)
print("{:<8}".format(x), end='  ')
s2 = s1[24:32]
x = 128 * (ord(s2[0]) - 48) + 64 * (ord(s2[1]) - 48) + 32 * (ord(s2[2]) - 48) + 16 * (ord(s2[3]) - 48) + 8 * (ord(s2[4]) - 48) + 4 * (ord(s2[5]) - 48) + 2 * (ord(s2[6]) - 48) + (ord(s2[7]) - 48)
print("{:<8}".format(x), end='  ')
